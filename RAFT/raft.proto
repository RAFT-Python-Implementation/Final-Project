syntax = "proto3";

option go_package = "../raftkv";
package raftkv;

// Core Frontend Service for client interactions
service FrontEnd {
    rpc StartRaft(IntegerArg) returns (Reply){};
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
}

// Key-Value Store Service for server operations
service KeyValueStore {
    rpc GetState(Empty) returns (State) {};
    rpc Get(GetKey) returns (Reply) {};
    rpc Put(KeyValue) returns (Reply){};
    rpc Replace(KeyValue) returns (Reply){};
}

// Internal RAFT Service for node-to-node communication
service RaftNode {
    rpc RequestVote (VoteRequest) returns (VoteResponse);
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc SendCommand (SendCommandRequest) returns (SendCommandResponse);
    rpc LogAcknowledgment (LogAckRequest) returns (LogAckResponse);
    rpc ClientCommand (ClientRequest) returns (ClientResponse);
}

// Frontend and KeyValueStore messages
message KeyValue {
    string key = 1;
    string value = 2;
    int64 ClientId = 3;
    int64 RequestId = 4;
}

message GetKey {
    string key = 1;
    int64 ClientId = 2;
    int64 RequestId = 3;
}

message Reply {
    bool wrongLeader = 1;
    string error = 2;
    string value = 3;
}

message State {
    int32 term = 1;
    bool isLeader = 2;
}

message Empty {}

message IntegerArg {
    int32 arg = 1;
}

// RAFT protocol messages
message VoteRequest {
    int32 term = 1;
    string candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

message VoteResponse {
    int32 term = 1;
    bool vote_granted = 2;
}

message LogEntry {
    int32 term = 1;
    int32 index = 2;
    string command = 3;
    string key = 4;
    string value = 5;
    int64 client_id = 6;
    int64 request_id = 7;
}

message AppendEntriesRequest {
    int32 term = 1;
    string leader_id = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    repeated LogEntry entries = 5;
    int32 leader_commit = 6;
    string prev_command = 7;
    int32 sent_length = 8;
    int32 acked_length = 9;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
    int32 ack = 3;
}

message SendCommandRequest {
    string msg = 1;
    int64 client_id = 2;
    int64 request_id = 3;
}

message SendCommandResponse {
    bool success = 1;
    string message = 2;
}

message ClientRequest {
    string command = 1;
    string key = 2;
    string value = 3;
}

message ClientResponse {
    bool success = 1;
    string message = 2;
    string leader_hint = 3;
}

message LogAckRequest {
    string follower_id = 1;
    int32 term = 2;
    int32 ack = 3;
    bool success = 4;
}

message LogAckResponse {
    bool received = 1;
}